services:
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - main

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    command: [
      "bash", "-c",
      '
       docker-entrypoint.sh
       --requirepass "$$(cat $$REDIS_PASS_FILE)"
      '
    ]
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main

  file-service:
    image: nginx:latest
    ports:
      - "8087:80"
    volumes:
      - file_storage:/usr/share/nginx/html:ro
    environment:
      NGINX_PORT: 80
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - main

  eureka:
    image: 904233107073.dkr.ecr.us-east-2.amazonaws.com/petcare:petcare-eureka-latest
    build:
      context: ./petcare-eureka
      dockerfile: Dockerfile
    ports:
      - "8762:8762"
    environment:
      JAVA_OPTS: "-Xms128m -Xmx256m"
    command: ["java", "-jar", "eureka.jar"]
    networks:
      - main
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8762/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    image: 904233107073.dkr.ecr.us-east-2.amazonaws.com/petcare:petcare-gateway-latest
    build:
      context: ./petcare-gateway
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      JAVA_OPTS: "-Xms128m -Xmx256m"
    command: ["java", "-jar", "gateway.jar"]
    networks:
      - main

  appointment:
    image: 904233107073.dkr.ecr.us-east-2.amazonaws.com/petcare:petcare-appointment-latest
    build:
      context: ./petcare-appointment
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: petcare_suite
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_HOST: kafka
      KAFKA_PORT: 9093
    secrets:
      - db_user
      - db_password
      - redis_password
      - jwt_secret_key
      - db_host
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 256M
    networks:
      - main

  management:
   image: 904233107073.dkr.ecr.us-east-2.amazonaws.com/petcare:petcare-management-latest
   build:
     context: ./petcare-management
     dockerfile: Dockerfile
   ports:
     - "8081:8081"
   environment:
     SPRING_PROFILES_ACTIVE: dev
     DB_HOST: postgres
     DB_PORT: 5432
     DB_NAME: petcare_suite
     REDIS_HOST: redis
     REDIS_PORT: 6379
     KAFKA_HOST: kafka
     KAFKA_PORT: 9093
   secrets:
     - db_user
     - db_password
     - redis_password
     - jwt_secret_key
     - db_host
   deploy:
     mode: replicated
     replicas: 1
     update_config:
       parallelism: 1
       delay: 10s
       order: start-first
     restart_policy:
       condition: on-failure
       delay: 5s
     resources:
       limits:
         memory: 256M
       reservations:
         memory: 256M
   networks:
     - main

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  file_storage:
    driver: local

secrets:
  db_password:
    external: true
  db_user:
    external: true
  db_name:
    external: true
  redis_password:
    external: true
  jwt_secret_key:
    external: true
  db_host:
    external: true
networks:
  main:
    driver: overlay
    attachable: true
