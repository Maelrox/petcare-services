services:
  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_DB_FILE: /run/secrets/db_name
    secrets:
      - db_password
      - db_user
      - db_name
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user) -d $$(cat /run/secrets/db_name)" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass $$(cat /run/secrets/redis_password)
    secrets:
      - redis_password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  file-service:
    image: nginx:latest
    ports:
      - "8087:80"
    volumes:
      - file_storage:/usr/share/nginx/html:ro
    environment:
      NGINX_PORT: 80
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [ "CMD", "nginx", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3

  appointment-service:
    image: ${REGISTRY:-localhost}/appointment-service:${TAG:-latest}
    build:
      context: ./appointment-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_REDIS_HOST: redis
    secrets:
      - db_user
      - db_password
      - db_name
      - redis_password
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  file_storage:
    driver: local

secrets:
  db_password:
    external: true
  db_user:
    external: true
  db_name:
    external: true
  redis_password:
    external: true

networks:
  default:
    driver: overlay
